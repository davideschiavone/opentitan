// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package mailbox_reg_pkg;

  // Param list
  parameter int NumAlerts = 1;

  // Address widths within the block
  parameter int BlockAw = 6;

  // Number of registers for every interface
  parameter int NumRegs = 14;

  // Alert indices
  typedef enum int {
    AlertFatalFaultIdx = 0
  } mailbox_alert_idx_t;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } completion;
    struct packed {
      logic        q;
    } doorbell;
  } mailbox_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } completion;
    struct packed {
      logic        q;
    } doorbell;
  } mailbox_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } completion;
    struct packed {
      logic        q;
      logic        qe;
    } doorbell;
  } mailbox_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } mailbox_reg2hw_alert_test_reg_t;

  typedef struct packed {
    struct packed {
      logic [30:0] q;
    } field1;
    struct packed {
      logic        q;
    } intr_enable;
  } mailbox_reg2hw_channel_flags_reg_t;

  typedef struct packed {
    struct packed {
      logic [30:0] q;
    } preserve_mask;
    struct packed {
      logic        q;
    } intr;
  } mailbox_reg2hw_doorbell_reg_t;

  typedef struct packed {
    struct packed {
      logic [30:0] q;
    } preserve_mask;
    struct packed {
      logic        q;
    } intr;
  } mailbox_reg2hw_completion_interrupt_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } completion;
    struct packed {
      logic        d;
      logic        de;
    } doorbell;
  } mailbox_hw2reg_intr_state_reg_t;

  // Register -> HW type
  typedef struct packed {
    mailbox_reg2hw_intr_state_reg_t intr_state; // [105:104]
    mailbox_reg2hw_intr_enable_reg_t intr_enable; // [103:102]
    mailbox_reg2hw_intr_test_reg_t intr_test; // [101:98]
    mailbox_reg2hw_alert_test_reg_t alert_test; // [97:96]
    mailbox_reg2hw_channel_flags_reg_t channel_flags; // [95:64]
    mailbox_reg2hw_doorbell_reg_t doorbell; // [63:32]
    mailbox_reg2hw_completion_interrupt_reg_t completion_interrupt; // [31:0]
  } mailbox_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    mailbox_hw2reg_intr_state_reg_t intr_state; // [3:0]
  } mailbox_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] MAILBOX_INTR_STATE_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] MAILBOX_INTR_ENABLE_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] MAILBOX_INTR_TEST_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] MAILBOX_ALERT_TEST_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] MAILBOX_RESERVED_1_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] MAILBOX_CHANNEL_STATUS_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] MAILBOX_RESERVED_2_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] MAILBOX_RESERVED_3_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] MAILBOX_CHANNEL_FLAGS_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] MAILBOX_LENGTH_OFFSET = 6'h 24;
  parameter logic [BlockAw-1:0] MAILBOX_MESSAGE_HEADER_OFFSET = 6'h 28;
  parameter logic [BlockAw-1:0] MAILBOX_MESSAGE_PAYLOAD_1_OFFSET = 6'h 2c;
  parameter logic [BlockAw-1:0] MAILBOX_DOORBELL_OFFSET = 6'h 30;
  parameter logic [BlockAw-1:0] MAILBOX_COMPLETION_INTERRUPT_OFFSET = 6'h 34;

  // Reset values for hwext registers and their fields
  parameter logic [1:0] MAILBOX_INTR_TEST_RESVAL = 2'h 0;
  parameter logic [0:0] MAILBOX_INTR_TEST_DOORBELL_RESVAL = 1'h 0;
  parameter logic [0:0] MAILBOX_INTR_TEST_COMPLETION_RESVAL = 1'h 0;
  parameter logic [0:0] MAILBOX_ALERT_TEST_RESVAL = 1'h 0;
  parameter logic [0:0] MAILBOX_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    MAILBOX_INTR_STATE,
    MAILBOX_INTR_ENABLE,
    MAILBOX_INTR_TEST,
    MAILBOX_ALERT_TEST,
    MAILBOX_RESERVED_1,
    MAILBOX_CHANNEL_STATUS,
    MAILBOX_RESERVED_2,
    MAILBOX_RESERVED_3,
    MAILBOX_CHANNEL_FLAGS,
    MAILBOX_LENGTH,
    MAILBOX_MESSAGE_HEADER,
    MAILBOX_MESSAGE_PAYLOAD_1,
    MAILBOX_DOORBELL,
    MAILBOX_COMPLETION_INTERRUPT
  } mailbox_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] MAILBOX_PERMIT [14] = '{
    4'b 0001, // index[ 0] MAILBOX_INTR_STATE
    4'b 0001, // index[ 1] MAILBOX_INTR_ENABLE
    4'b 0001, // index[ 2] MAILBOX_INTR_TEST
    4'b 0001, // index[ 3] MAILBOX_ALERT_TEST
    4'b 1111, // index[ 4] MAILBOX_RESERVED_1
    4'b 1111, // index[ 5] MAILBOX_CHANNEL_STATUS
    4'b 1111, // index[ 6] MAILBOX_RESERVED_2
    4'b 1111, // index[ 7] MAILBOX_RESERVED_3
    4'b 1111, // index[ 8] MAILBOX_CHANNEL_FLAGS
    4'b 1111, // index[ 9] MAILBOX_LENGTH
    4'b 1111, // index[10] MAILBOX_MESSAGE_HEADER
    4'b 1111, // index[11] MAILBOX_MESSAGE_PAYLOAD_1
    4'b 1111, // index[12] MAILBOX_DOORBELL
    4'b 1111  // index[13] MAILBOX_COMPLETION_INTERRUPT
  };

endpackage
