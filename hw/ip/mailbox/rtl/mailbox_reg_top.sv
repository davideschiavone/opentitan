// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module mailbox_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output mailbox_reg_pkg::mailbox_reg2hw_t reg2hw, // Write
  input  mailbox_reg_pkg::mailbox_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o
);

  import mailbox_reg_pkg::* ;

  localparam int AW = 6;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [13:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(14)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_doorbell_qs;
  logic intr_state_completion_qs;
  logic intr_enable_we;
  logic intr_enable_doorbell_qs;
  logic intr_enable_doorbell_wd;
  logic intr_enable_completion_qs;
  logic intr_enable_completion_wd;
  logic intr_test_we;
  logic intr_test_doorbell_wd;
  logic intr_test_completion_wd;
  logic alert_test_we;
  logic alert_test_wd;
  logic reserved_1_we;
  logic [31:0] reserved_1_qs;
  logic [31:0] reserved_1_wd;
  logic channel_status_we;
  logic channel_status_channel_free_qs;
  logic channel_status_channel_free_wd;
  logic channel_status_channel_error_qs;
  logic channel_status_channel_error_wd;
  logic [29:0] channel_status_field1_qs;
  logic [29:0] channel_status_field1_wd;
  logic reserved_2_we;
  logic [31:0] reserved_2_qs;
  logic [31:0] reserved_2_wd;
  logic reserved_3_we;
  logic [31:0] reserved_3_qs;
  logic [31:0] reserved_3_wd;
  logic channel_flags_we;
  logic channel_flags_intr_enable_qs;
  logic channel_flags_intr_enable_wd;
  logic [30:0] channel_flags_field1_qs;
  logic [30:0] channel_flags_field1_wd;
  logic length_we;
  logic [31:0] length_qs;
  logic [31:0] length_wd;
  logic message_header_we;
  logic [7:0] message_header_message_id_qs;
  logic [7:0] message_header_message_id_wd;
  logic [1:0] message_header_message_type_qs;
  logic [1:0] message_header_message_type_wd;
  logic [7:0] message_header_protocol_id_qs;
  logic [7:0] message_header_protocol_id_wd;
  logic [9:0] message_header_token_qs;
  logic [9:0] message_header_token_wd;
  logic [3:0] message_header_field1_qs;
  logic [3:0] message_header_field1_wd;
  logic message_payload_1_we;
  logic [31:0] message_payload_1_qs;
  logic [31:0] message_payload_1_wd;
  logic doorbell_we;
  logic doorbell_intr_qs;
  logic doorbell_intr_wd;
  logic [30:0] doorbell_preserve_mask_qs;
  logic [30:0] doorbell_preserve_mask_wd;
  logic completion_interrupt_we;
  logic completion_interrupt_intr_qs;
  logic completion_interrupt_intr_wd;
  logic [30:0] completion_interrupt_preserve_mask_qs;
  logic [30:0] completion_interrupt_preserve_mask_wd;

  // Register instances
  // R[intr_state]: V(False)
  //   F[doorbell]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_doorbell (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.intr_state.doorbell.de),
    .d      (hw2reg.intr_state.doorbell.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.doorbell.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_doorbell_qs)
  );

  //   F[completion]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_completion (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.intr_state.completion.de),
    .d      (hw2reg.intr_state.completion.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.completion.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_completion_qs)
  );


  // R[intr_enable]: V(False)
  //   F[doorbell]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_doorbell (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_doorbell_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.doorbell.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_doorbell_qs)
  );

  //   F[completion]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_completion (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_completion_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.completion.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_completion_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [1:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[doorbell]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_doorbell (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_doorbell_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.doorbell.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.doorbell.qe = intr_test_qe;

  //   F[completion]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_completion (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_completion_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.completion.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.completion.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [0:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.qe = alert_test_qe;


  // R[reserved_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_reserved_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (reserved_1_we),
    .wd     (reserved_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (reserved_1_qs)
  );


  // R[channel_status]: V(False)
  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_channel_status_channel_free (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (channel_status_we),
    .wd     (channel_status_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (channel_status_channel_free_qs)
  );

  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_channel_status_channel_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (channel_status_we),
    .wd     (channel_status_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (channel_status_channel_error_qs)
  );

  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_channel_status_field1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (channel_status_we),
    .wd     (channel_status_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (channel_status_field1_qs)
  );


  // R[reserved_2]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_reserved_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (reserved_2_we),
    .wd     (reserved_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (reserved_2_qs)
  );


  // R[reserved_3]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_reserved_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (reserved_3_we),
    .wd     (reserved_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (reserved_3_qs)
  );


  // R[channel_flags]: V(False)
  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_channel_flags_intr_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (channel_flags_we),
    .wd     (channel_flags_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_flags.intr_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (channel_flags_intr_enable_qs)
  );

  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (31'h0),
    .Mubi    (1'b0)
  ) u_channel_flags_field1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (channel_flags_we),
    .wd     (channel_flags_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_flags.field1.q),
    .ds     (),

    // to register interface (read)
    .qs     (channel_flags_field1_qs)
  );


  // R[length]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_length (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (length_we),
    .wd     (length_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (length_qs)
  );


  // R[message_header]: V(False)
  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_message_header_message_id (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (message_header_we),
    .wd     (message_header_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (message_header_message_id_qs)
  );

  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_message_header_message_type (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (message_header_we),
    .wd     (message_header_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (message_header_message_type_qs)
  );

  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_message_header_protocol_id (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (message_header_we),
    .wd     (message_header_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (message_header_protocol_id_qs)
  );

  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0),
    .Mubi    (1'b0)
  ) u_message_header_token (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (message_header_we),
    .wd     (message_header_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (message_header_token_qs)
  );

  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0),
    .Mubi    (1'b0)
  ) u_message_header_field1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (message_header_we),
    .wd     (message_header_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (message_header_field1_qs)
  );


  // R[message_payload_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_message_payload_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (message_payload_1_we),
    .wd     (message_payload_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (message_payload_1_qs)
  );


  // R[doorbell]: V(False)
  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_doorbell_intr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (doorbell_we),
    .wd     (doorbell_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell.intr.q),
    .ds     (),

    // to register interface (read)
    .qs     (doorbell_intr_qs)
  );

  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (31'h0),
    .Mubi    (1'b0)
  ) u_doorbell_preserve_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (doorbell_we),
    .wd     (doorbell_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell.preserve_mask.q),
    .ds     (),

    // to register interface (read)
    .qs     (doorbell_preserve_mask_qs)
  );


  // R[completion_interrupt]: V(False)
  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_completion_interrupt_intr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (completion_interrupt_we),
    .wd     (completion_interrupt_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt.intr.q),
    .ds     (),

    // to register interface (read)
    .qs     (completion_interrupt_intr_qs)
  );

  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (31'h0),
    .Mubi    (1'b0)
  ) u_completion_interrupt_preserve_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (completion_interrupt_we),
    .wd     (completion_interrupt_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt.preserve_mask.q),
    .ds     (),

    // to register interface (read)
    .qs     (completion_interrupt_preserve_mask_qs)
  );



  logic [13:0] addr_hit;
  always_comb begin
    addr_hit[ 0] = (reg_addr == MAILBOX_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == MAILBOX_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == MAILBOX_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == MAILBOX_ALERT_TEST_OFFSET);
    addr_hit[ 4] = (reg_addr == MAILBOX_RESERVED_1_OFFSET);
    addr_hit[ 5] = (reg_addr == MAILBOX_CHANNEL_STATUS_OFFSET);
    addr_hit[ 6] = (reg_addr == MAILBOX_RESERVED_2_OFFSET);
    addr_hit[ 7] = (reg_addr == MAILBOX_RESERVED_3_OFFSET);
    addr_hit[ 8] = (reg_addr == MAILBOX_CHANNEL_FLAGS_OFFSET);
    addr_hit[ 9] = (reg_addr == MAILBOX_LENGTH_OFFSET);
    addr_hit[10] = (reg_addr == MAILBOX_MESSAGE_HEADER_OFFSET);
    addr_hit[11] = (reg_addr == MAILBOX_MESSAGE_PAYLOAD_1_OFFSET);
    addr_hit[12] = (reg_addr == MAILBOX_DOORBELL_OFFSET);
    addr_hit[13] = (reg_addr == MAILBOX_COMPLETION_INTERRUPT_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(MAILBOX_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(MAILBOX_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(MAILBOX_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(MAILBOX_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(MAILBOX_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(MAILBOX_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(MAILBOX_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(MAILBOX_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(MAILBOX_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(MAILBOX_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(MAILBOX_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(MAILBOX_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(MAILBOX_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(MAILBOX_PERMIT[13] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_doorbell_wd = reg_wdata[0];

  assign intr_enable_completion_wd = reg_wdata[1];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_doorbell_wd = reg_wdata[0];

  assign intr_test_completion_wd = reg_wdata[1];
  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];
  assign reserved_1_we = addr_hit[4] & reg_we & !reg_error;

  assign reserved_1_wd = reg_wdata[31:0];
  assign channel_status_we = addr_hit[5] & reg_we & !reg_error;

  assign channel_status_channel_free_wd = reg_wdata[0];

  assign channel_status_channel_error_wd = reg_wdata[1];

  assign channel_status_field1_wd = reg_wdata[31:2];
  assign reserved_2_we = addr_hit[6] & reg_we & !reg_error;

  assign reserved_2_wd = reg_wdata[31:0];
  assign reserved_3_we = addr_hit[7] & reg_we & !reg_error;

  assign reserved_3_wd = reg_wdata[31:0];
  assign channel_flags_we = addr_hit[8] & reg_we & !reg_error;

  assign channel_flags_intr_enable_wd = reg_wdata[0];

  assign channel_flags_field1_wd = reg_wdata[31:1];
  assign length_we = addr_hit[9] & reg_we & !reg_error;

  assign length_wd = reg_wdata[31:0];
  assign message_header_we = addr_hit[10] & reg_we & !reg_error;

  assign message_header_message_id_wd = reg_wdata[7:0];

  assign message_header_message_type_wd = reg_wdata[9:8];

  assign message_header_protocol_id_wd = reg_wdata[17:10];

  assign message_header_token_wd = reg_wdata[27:18];

  assign message_header_field1_wd = reg_wdata[31:28];
  assign message_payload_1_we = addr_hit[11] & reg_we & !reg_error;

  assign message_payload_1_wd = reg_wdata[31:0];
  assign doorbell_we = addr_hit[12] & reg_we & !reg_error;

  assign doorbell_intr_wd = reg_wdata[0];

  assign doorbell_preserve_mask_wd = reg_wdata[31:1];
  assign completion_interrupt_we = addr_hit[13] & reg_we & !reg_error;

  assign completion_interrupt_intr_wd = reg_wdata[0];

  assign completion_interrupt_preserve_mask_wd = reg_wdata[31:1];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check[0] = 1'b0;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = reserved_1_we;
    reg_we_check[5] = channel_status_we;
    reg_we_check[6] = reserved_2_we;
    reg_we_check[7] = reserved_3_we;
    reg_we_check[8] = channel_flags_we;
    reg_we_check[9] = length_we;
    reg_we_check[10] = message_header_we;
    reg_we_check[11] = message_payload_1_we;
    reg_we_check[12] = doorbell_we;
    reg_we_check[13] = completion_interrupt_we;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_doorbell_qs;
        reg_rdata_next[1] = intr_state_completion_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_doorbell_qs;
        reg_rdata_next[1] = intr_enable_completion_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = reserved_1_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = channel_status_channel_free_qs;
        reg_rdata_next[1] = channel_status_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_field1_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = reserved_2_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = reserved_3_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = channel_flags_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_field1_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = length_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[7:0] = message_header_message_id_qs;
        reg_rdata_next[9:8] = message_header_message_type_qs;
        reg_rdata_next[17:10] = message_header_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_token_qs;
        reg_rdata_next[31:28] = message_header_field1_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = message_payload_1_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = doorbell_intr_qs;
        reg_rdata_next[31:1] = doorbell_preserve_mask_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = completion_interrupt_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_preserve_mask_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
